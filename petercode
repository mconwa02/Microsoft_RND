import boom from 'boom';
import uuidv4 from 'uuid/v4'

import gremlin from '../../../connectors/gremlin';
import lewis from '../../../connectors/lewis';

const conversationContexts = {};

const intentHandler = async (convId,intent, entities) => {
  switch(intent) {
    case "FindRecipebyIngredient":
      conversationContexts[convId]['lastIntent'] = intent;
      if(entities.length > 0) {
        const recipes = await gremlin.getRecipesByIngredients(entities[0].entity); //TODO only 1 at the mo

        // TODO fastest path

        return [`I have found ${recipes.length} recipie(s)`, ...recipes];
      } else {
        return ['Could you add an ingredient?']
      }
    case "None":
      if(conversationContexts[convId]['lastIntent']) {
        return intentHandler(conversationContexts[convId]['lastIntent'], entities);
      } else {
        return ["Sorry I didn't understand"];
      }
  }
};

export const query = async (convId, message) => {
  try {
    if(convId === '') {
      convId = uuidv4();
    }

    if(!conversationContexts[convId]) {
      conversationContexts[convId] = {};
    }

    //get the intent
    const intent  = await lewis.getIntent(message);

    const response = await intentHandler(convId,intent.topScoringIntent.intent, intent.entities);
    return { convId, output: response };

  } catch (err) {
    throw boom.badImplementation('Failed to create knowledge');
  }
};

import Gremlin from 'gremlin';
const config = {};

config.endpoint = "leetest.gremlin.cosmosdb.azure.com";
config.primaryKey = "8r3PMn7j8I2gQv5XQybdYlhxzjL3PbDuPbk66xVQLTC6nXdS2ZFFEduWIbCoSjisl8ka3BU8NeHpSi3wzJDrOA==";
config.database = "foodv1";
config.collection = "foodv1";

const client = Gremlin.createClient(
  443,
  config.endpoint,
  {
    "session": false,
    "ssl": true,
    "user": `/dbs/${config.database}/colls/${config.collection}`,
    "password": config.primaryKey
  }
);

export const getIntent = async (message) =>
{
  return new Promise((resolve, reject) => {
    request(`https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/93985341-178e-473c-88c1-6468f27345e2?subscription-key=63f80c9861174dfb8502f9b791df2698&timezoneOffset=-360&q=${message}`,  (error, response, body) => {
      if(error) {
        reject(error);
      }

      resolve(JSON.parse(response.body));
    });
  });
};

export const getRecipesByIngredients = async (ingredient) =>
{
  return new Promise((resolve, reject) => {
    client.execute(`g.V().hasLabel('ingredient').has('name' ,'${ingredient.toLowerCase()}').in('includes').values('name')`, { }, (err, results) => {
      if (err) {
        return reject(console.error(err));
      }

      console.log("Result: %s\n", JSON.stringify(results));
      resolve(results)
    });
  });
};


